// Require the dev-dependencies
let chai = require('chai');
let chaiHttp = require('chai-http');
let server = require('../app'); // Adjust the path to your app module as needed
let should = chai.should();
const jwt = require('jsonwebtoken');
require('dotenv').config();

chai.use(chaiHttp);

describe('Express API Testing', () => {

  describe('Admin API Testing', () => {

    let adminToken;

    it('it should REGISTER a new admin', (done) => {
      chai.request(server)
        .post('/adminRegister')
        .send({
          first_name: "Jane",
          last_name: "Smith",
          email: "jane.smith@example.com",
          phone_number: "0987654321",
          password: "password123"
        })
        .end((err, res) => {
          res.should.have.status(200);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(true);
          done();
        });
    });

    it('it should LOGIN an admin and return a token', (done) => {
      chai.request(server)
        .post('/adminLogin')
        .send({
          email: "john.doe@example.com",
          password: "password123"
        })
        .end((err, res) => {
          res.should.have.status(200);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(true);
          res.body.should.have.property('token');
          adminToken = res.body.token;
          done();
        });
    });

    it('it should NOT LOGIN an admin with incorrect password', (done) => {
      chai.request(server)
        .post('/adminLogin')
        .send({
          email: "john.doe@example.com",
          password: "wrongpassword"
        })
        .end((err, res) => {
          res.should.have.status(401);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(false);
          res.body.should.have.property('message').eql('Authentication failed. Wrong password.');
          done();
        });
    });

    it('it should UPDATE the admin password', (done) => {
      chai.request(server)
        .post('/adminPasswordUpdate')
        .set('Authorization', `Bearer ${adminToken}`)
        .send({
          email: "john.doe@example.com",
          password: "newpassword123"
        })
        .end((err, res) => {
          res.should.have.status(200);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(true);
          done();
        });
    });

    it('it should NOT UPDATE the admin password without token', (done) => {
      chai.request(server)
        .post('/adminPasswordUpdate')
        .send({
          email: "john.doe@example.com",
          password: "newpassword123"
        })
        .end((err, res) => {
          res.should.have.status(401);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(false);
          res.body.should.have.property('message').eql('Authorization Failed. No Access Token');
          done();
        });
    });

    it('it should GET admin details by adminId', (done) => {
      chai.request(server)
        .get('/admindetails/1')
        .set('Authorization', `Bearer ${adminToken}`)
        .end((err, res) => {
          res.should.have.status(200);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(true);
          done();
        });
    });

    it('it should NOT GET admin details without token', (done) => {
      chai.request(server)
        .get('/admindetails/1')
        .end((err, res) => {
          res.should.have.status(401);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(false);
          res.body.should.have.property('message').eql('Authorization Failed. No Access Token');
          done();
        });
    });

    it('it should NOT GET admin details with invalid token', (done) => {
      chai.request(server)
        .get('/admindetails/1')
        .set('Authorization', 'Bearer invalidtoken')
        .end((err, res) => {
          res.should.have.status(401);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(false);
          res.body.should.have.property('message').eql('Authorization Failed. Invalid Token');
          done();
        });
    });

  });

});
===========================================================================================
// Require the dev-dependencies
let chai = require('chai');
let chaiHttp = require('chai-http');
let server = require('../app'); // Adjust the path to your app module as needed
let should = chai.should();
const jwt = require('jsonwebtoken');
require('dotenv').config();

chai.use(chaiHttp);

describe('Express API Testing', () => {

  describe('Admin API Testing', () => {

    it('it should REGISTER a new admin', (done) => {
      chai.request(server)
        .post('/adminRegister')
        .send({
          first_name: "Jane",
          last_name: "Smith",
          email: "jane.smith@example.com",
          phone_number: "0987654321",
          password: "password123"
        })
        .end((err, res) => {
          res.should.have.status(200);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(true);
          done();
        });
    });

    it('it should LOGIN an admin and return a token', (done) => {
      chai.request(server)
        .post('/adminLogin')
        .send({
          email: "john.doe@example.com",
          password: "password123"
        })
        .end((err, res) => {
          res.should.have.status(200);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(true);
          res.body.should.have.property('token');
          done();
        });
    });

    it('it should NOT LOGIN an admin with incorrect password', (done) => {
      chai.request(server)
        .post('/adminLogin')
        .send({
          email: "john.doe@example.com",
          password: "wrongpassword"
        })
        .end((err, res) => {
          res.should.have.status(401);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(false);
          res.body.should.have.property('message').eql('Invalid password');
          done();
        });
    });

    it('it should UPDATE the admin password', (done) => {
      // First login to get the token
      chai.request(server)
        .post('/adminLogin')
        .send({
          email: "john.doe@example.com",
          password: "password123"
        })
        .end((err, res) => {
          const token = res.body.token;
          chai.request(server)
            .post('/adminPasswordUpdate')
            .set('Authorization', `Bearer ${token}`)
            .send({
              email: "john.doe@example.com",
              password: "newpassword123"
            })
            .end((err, res) => {
              res.should.have.status(200);
              res.body.should.be.a('object');
              res.body.should.have.property('success').eql(true);
              done();
            });
        });
    });

    it('it should NOT UPDATE the admin password without token', (done) => {
      chai.request(server)
        .post('/adminPasswordUpdate')
        .send({
          email: "john.doe@example.com",
          password: "newpassword123"
        })
        .end((err, res) => {
          res.should.have.status(401);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(false);
          res.body.should.have.property('message').eql('Authorization Failed. No Access Token');
          done();
        });
    });

    it('it should GET admin details by adminId', (done) => {
      // First login to get the token
      chai.request(server)
        .post('/adminLogin')
        .send({
          email: "john.doe@example.com",
          password: "password123"
        })
        .end((err, res) => {
          const token = res.body.token;
          const adminId = res.body.adminId;
          chai.request(server)
            .get(`/admindetails/${adminId}`)
            .set('Authorization', `Bearer ${token}`)
            .end((err, res) => {
              res.should.have.status(200);
              res.body.should.be.a('object');
              res.body.should.have.property('success').eql(true);
              res.body.data.should.have.property('admin_id').eql(adminId);
              done();
            });
        });
    });

    it('it should NOT GET admin details without token', (done) => {
      chai.request(server)
        .get('/admindetails/1')
        .end((err, res) => {
          res.should.have.status(401);
          res.body.should.be.a('object');
          res.body.should.have.property('success').eql(false);
          res.body.should.have.property('message').eql('Authorization Failed. No Access Token');
          done();
        });
    });

  });
});
